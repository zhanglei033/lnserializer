// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto
// Protobuf C++ Version: 5.27.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_test_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_test_2eproto;
namespace protobuf_test {
class Record;
struct RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
}  // namespace protobuf_test
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protobuf_test {

// ===================================================================


// -------------------------------------------------------------------

class Record final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protobuf_test.Record) */ {
 public:
  inline Record() : Record(nullptr) {}
  ~Record() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Record(
      ::google::protobuf::internal::ConstantInitialized);

  inline Record(const Record& from) : Record(nullptr, from) {}
  inline Record(Record&& from) noexcept
      : Record(nullptr, std::move(from)) {}
  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Record& default_instance() {
    return *internal_default_instance();
  }
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
        &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Record& a, Record& b) { a.Swap(&b); }
  inline void Swap(Record* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Record* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Record>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Record& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Record& from) { Record::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Record* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protobuf_test.Record"; }

 protected:
  explicit Record(::google::protobuf::Arena* arena);
  Record(::google::protobuf::Arena* arena, const Record& from);
  Record(::google::protobuf::Arena* arena, Record&& from) noexcept
      : Record(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdsFieldNumber = 1,
    kStringsFieldNumber = 2,
  };
  // repeated int64 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;

  public:
  void clear_ids() ;
  ::int64_t ids(int index) const;
  void set_ids(int index, ::int64_t value);
  void add_ids(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& ids() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_ids();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_ids() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_ids();

  public:
  // repeated string strings = 2;
  int strings_size() const;
  private:
  int _internal_strings_size() const;

  public:
  void clear_strings() ;
  const std::string& strings(int index) const;
  std::string* mutable_strings(int index);
  void set_strings(int index, const std::string& value);
  void set_strings(int index, std::string&& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, std::size_t size);
  void set_strings(int index, absl::string_view value);
  std::string* add_strings();
  void add_strings(const std::string& value);
  void add_strings(std::string&& value);
  void add_strings(const char* value);
  void add_strings(const char* value, std::size_t size);
  void add_strings(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& strings() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_strings();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_strings() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_strings();

  public:
  // @@protoc_insertion_point(class_scope:protobuf_test.Record)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      36, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Record_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Record& from_msg);
    ::google::protobuf::RepeatedField<::int64_t> ids_;
    mutable ::google::protobuf::internal::CachedSize _ids_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> strings_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Record

// repeated int64 ids = 1;
inline int Record::_internal_ids_size() const {
  return _internal_ids().size();
}
inline int Record::ids_size() const {
  return _internal_ids_size();
}
inline void Record::clear_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ids_.Clear();
}
inline ::int64_t Record::ids(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test.Record.ids)
  return _internal_ids().Get(index);
}
inline void Record::set_ids(int index, ::int64_t value) {
  _internal_mutable_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test.Record.ids)
}
inline void Record::add_ids(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_ids()->Add(value);
  // @@protoc_insertion_point(field_add:protobuf_test.Record.ids)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Record::ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf_test.Record.ids)
  return _internal_ids();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Record::mutable_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test.Record.ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ids();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Record::_internal_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ids_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Record::_internal_mutable_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ids_;
}

// repeated string strings = 2;
inline int Record::_internal_strings_size() const {
  return _internal_strings().size();
}
inline int Record::strings_size() const {
  return _internal_strings_size();
}
inline void Record::clear_strings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strings_.Clear();
}
inline std::string* Record::add_strings()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_strings()->Add();
  // @@protoc_insertion_point(field_add_mutable:protobuf_test.Record.strings)
  return _s;
}
inline const std::string& Record::strings(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf_test.Record.strings)
  return _internal_strings().Get(index);
}
inline std::string* Record::mutable_strings(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:protobuf_test.Record.strings)
  return _internal_mutable_strings()->Mutable(index);
}
inline void Record::set_strings(int index, const std::string& value) {
  _internal_mutable_strings()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_test.Record.strings)
}
inline void Record::set_strings(int index, std::string&& value) {
  _internal_mutable_strings()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_test.Record.strings)
}
inline void Record::set_strings(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_strings()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test.Record.strings)
}
inline void Record::set_strings(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_strings()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test.Record.strings)
}
inline void Record::set_strings(int index, absl::string_view value) {
  _internal_mutable_strings()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:protobuf_test.Record.strings)
}
inline void Record::add_strings(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_strings()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_test.Record.strings)
}
inline void Record::add_strings(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_strings()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_test.Record.strings)
}
inline void Record::add_strings(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_strings()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_test.Record.strings)
}
inline void Record::add_strings(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_strings()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_test.Record.strings)
}
inline void Record::add_strings(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_strings()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:protobuf_test.Record.strings)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Record::strings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf_test.Record.strings)
  return _internal_strings();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Record::mutable_strings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test.Record.strings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_strings();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Record::_internal_strings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.strings_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Record::_internal_mutable_strings() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.strings_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_test


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_test_2eproto_2epb_2eh
